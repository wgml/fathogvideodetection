#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language polish
\language_package babel
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Programowo-Sprzętowa Realizacja Algorytmów: wyznaczanie i śledzenie punktów
 charakterystycznych
\end_layout

\begin_layout Author
Wojciech Gumuła, Rafał Prusak
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Metody wykrywania punktów charakterystycznych.
\end_layout

\begin_layout Standard
Ważnym zagadnieniem w systemach wizyjnych jest pozyskiwanie informacji z
 obrazu, a następnie podejmowanie dalszych działań na podstawie pozyskanych
 danych.
 
\end_layout

\begin_layout Standard
Wyznaczanie punktów charakterystycznych ma na celu wybór 
\begin_inset Quotes pld
\end_inset

interesujących
\begin_inset Quotes prd
\end_inset

 elementów bądź rejonów obrazu oraz uzysanie charakterystyki specyficznej
 dla danej aplikacji.
 Jest to często niskopoziomowa składowa bardziej złożonych algorytmów.
 Uzyskanie punktów charakterystycznych pozwala na rozpoznawanie kształtów,
 wyszukiwanie elementów pasujących do wzorca czy też śledzenie obiektów
 w obrazie wideo.
\end_layout

\begin_layout Standard
Istnieje kilka rodzajów punktów uznawanych jako charakterystycznych:
\end_layout

\begin_layout Itemize
krawędzie,
\end_layout

\begin_layout Itemize
narożniki,
\end_layout

\begin_layout Itemize
krople(ang 
\begin_inset Quotes pld
\end_inset

blobs
\begin_inset Quotes prd
\end_inset

).
\end_layout

\begin_layout Standard
Szczególnym 
\begin_inset Quotes pld
\end_inset

powodzeniem
\begin_inset Quotes prd
\end_inset

 ciszą się narożniki.
 Punkt te powstają w miejscu krzyżowania się lub gwałtownej zmiany kształtu
 krawędzi.
 Z tego powodu, w punkcie narożnym dochodzi do nagłej zmiany wartości gradientu
 obrazu, co znacząco ułatwia poszukiwanie tego punktu.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Metoda Harrisa
\end_layout

\begin_layout Standard
Algorytm Harrisa polega na analizie jasności obrazu i wyszukiwaniu zmian
 gradientu.
\end_layout

\begin_layout Standard
Poszukiwane są odchylenia jasności:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $E(u,v)=\underset{x,y}{\sum}w(x,y)[I(x+u,y+v)-I(x,y)]^{2}$
\end_inset


\end_layout

\begin_layout Standard
gdzie:
\end_layout

\begin_layout Itemize
\begin_inset Formula $w(x,y)$
\end_inset

 - okno w punkcie 
\begin_inset Formula $(x,y)$
\end_inset

 o wymiarach 
\begin_inset Formula $u\times v$
\end_inset

,
\end_layout

\begin_layout Itemize
\begin_inset Formula $I(x,y)$
\end_inset

 - jasność w punkcie
\begin_inset Formula $(x,y)$
\end_inset

,
\end_layout

\begin_layout Itemize
\begin_inset Formula $I(x+u,y+v)$
\end_inset

 - jasność w drugim punkcie okna.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Poszukujemy znaczącego odchylenia, więc celem jest maksymalizacja:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\underset{x,y}{\sum}[I(x+u,y+v)-I(x,y)]^{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Po rozwinięciu w szereg Taylora:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $E(u,v)\approx\underset{x,y}{\sum}[I(x,y)+uI_{x}+vI_{y}-I(x,y)]^{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Dokonujemy skrócenia:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $E(u,v)\approx\underset{x,y}{\sum}u^{2}I_{x}^{2}+2uvI_{x}I_{y}+v^{2}I_{y}^{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Równanie można zapisać w postaci macieżowej:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $E(u,v)\approx[u\,v]M[\begin{array}{c}
u\\
v
\end{array}]$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
z macierzą w postaci:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $M=\begin{array}{cc}
I_{x}^{2} & I_{x}I_{y}\\
I_{x}I_{y} & I_{y}^{2}
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Dla każdego okna wyliczana jest wartość wyrażenia:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $R=det(M)-k(trace(M))^{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
gdzie:
\end_layout

\begin_layout Itemize
\begin_inset Formula $det(M)=\lambda_{1}\lambda_{2}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $trace(M)=\lambda_{1}+\lambda_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Wartość wyrażenia 
\begin_inset Formula $R$
\end_inset

 powyżej pewnej wartości granicznej oznacza występowanie narożnika.
\end_layout

\begin_layout Subsection
Implementacja w OpenCV
\end_layout

\begin_layout Standard
Poniższy kod prezentuje wykrywanie narożników za pomocą biblioteki OpenCV:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout

#include "opencv2/highgui.hpp" 
\end_layout

\begin_layout Plain Layout

#include "opencv2/imgproc.hpp" 
\end_layout

\begin_layout Plain Layout

#include <iostream> 
\end_layout

\begin_layout Plain Layout

#include <stdio.h> 
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

using namespace cv; 
\end_layout

\begin_layout Plain Layout

using namespace std;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Mat src, src_gray; 
\end_layout

\begin_layout Plain Layout

int thresh = 200; 
\end_layout

\begin_layout Plain Layout

int max_thresh = 255;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char* source_window = "Source image"; 
\end_layout

\begin_layout Plain Layout

char* corners_window = "Corners detected";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void cornerHarris_demo( int, void* ) {     
\end_layout

\begin_layout Plain Layout

	Mat dst, dst_norm, dst_norm_scaled;     
\end_layout

\begin_layout Plain Layout

	dst = Mat::zeros(src.size(), CV_32FC1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	int blockSize = 2;     
\end_layout

\begin_layout Plain Layout

	int apertureSize = 3;     
\end_layout

\begin_layout Plain Layout

	double k = 0.04;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	cornerHarris(src_gray, dst, blockSize, apertureSize, k, BORDER_DEFAULT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	normalize(dst, dst_norm, 0, 255, NORM_MINMAX, CV_32FC1, Mat());     
\end_layout

\begin_layout Plain Layout

	convertScaleAbs( dst_norm, dst_norm_scaled );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for (int j=0; j<dst_norm.rows ; j++) {         
\end_layout

\begin_layout Plain Layout

		for (int i=0; i<dst_norm.cols; i++) {             
\end_layout

\begin_layout Plain Layout

			if((int)dst_norm.at<float>(j,i) > thresh)                 
\end_layout

\begin_layout Plain Layout

				circle(dst_norm_scaled, Point(i, j), 5, Scalar(0), 2, 8, 0);       
  
\end_layout

\begin_layout Plain Layout

		}     
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	namedWindow(corners_window, WINDOW_AUTOSIZE);     
\end_layout

\begin_layout Plain Layout

	imshow(corners_window, dst_norm_scaled); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main( int argc, char** argv ) {
\end_layout

\begin_layout Plain Layout

	src = imread(argv[1], 1);     
\end_layout

\begin_layout Plain Layout

	cvtColor(src, src_gray, COLOR_BGR2GRAY);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	namedWindow(source_window, WINDOW_AUTOSIZE);     
\end_layout

\begin_layout Plain Layout

	createTrackbar("Threshold: ", source_window, &thresh, max_thresh, cornerHarris_
demo);     
\end_layout

\begin_layout Plain Layout

	imshow(source_window, src);
\end_layout

\begin_layout Plain Layout

    cornerHarris_demo(0, 0);
\end_layout

\begin_layout Plain Layout

    waitKey(0);     
\end_layout

\begin_layout Plain Layout

	return(0); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/harris-lena.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Wykrywanie narożników metodą Harisa w OpenCV
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Metoda Susan
\end_layout

\begin_layout Standard
Algorytm SUSAN (ang.
 Smallest Univalue Segment Assimilating Nucleus) polega na znajdowaniu pikseli,
 które w otoczeniu majmałą̨ liczbę punktów o zbliżonej jasności.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $c(r,r_{0})=\begin{cases}
1 & gdy\,|I(r)-I(r_{0})|\leq t\\
0 & gdy\,|I(r)-I(r_{0})|>t
\end{cases}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
gdzie:
\end_layout

\begin_layout Itemize
\begin_inset Formula $I$
\end_inset

 - jasność obrazu,
\end_layout

\begin_layout Itemize
\begin_inset Formula $r_{0}$
\end_inset

 - piksel centralny,
\end_layout

\begin_layout Itemize
\begin_inset Formula $t$
\end_inset

 - próg podobieństwa pikseli
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Liczbę pikseli podobnych wyznaczamy następująco:
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $D(r_{0})=\underset{r\epsilon N(r_{0})}{\sum}c(r,r_{0})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
gdzie 
\begin_inset Formula $N(r_{0})$
\end_inset

 to otoczenie piksela centralnego.
\end_layout

\begin_layout Standard
Aby punkt był uznany za narożnik, co najwyżej połowa punktów jego otoczeniu
 może być do niego podobna.
\end_layout

\begin_layout Section
Metoda Fast
\end_layout

\begin_layout Standard
Algorytm Fast (ang.
 Features from Accelerated Segment Test) opiera się, podobnie jak Susan,
 na przeszukaniu otoczenia piksela.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Opis algorytmu:
\end_layout

\begin_layout Enumerate
Wybieramy piksel 
\begin_inset Formula $p$
\end_inset

 o poziomie jasności 
\begin_inset Formula $I_{p}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Wybieramy wartośc progu 
\begin_inset Formula $t$
\end_inset

.
\end_layout

\begin_layout Enumerate
Wybieramy okrąg o promieniu 
\begin_inset Formula $r=16$
\end_inset

 pikseli.
\end_layout

\begin_layout Enumerate
Piksel 
\begin_inset Formula $p$
\end_inset

 jest narożnikiem jeżeli na okręgu znajduje się ciąg
\begin_inset Formula $n$
\end_inset

 pikseli jaśniejszych niż 
\begin_inset Formula $I_{p}+t$
\end_inset

 lub ciemniejszych niż 
\begin_inset Formula $I_{p}-t$
\end_inset

.
\end_layout

\begin_layout Standard
Algorytm ten został udoskonalony przez dodanie testu, który pozwala bardzo
 szybko odrzucić dużą liczbę punktów nie będących narożnikami.
 W tym teście sprawdzana jest jasność po kolei pikseli 1, 9, 5, 13.
\end_layout

\begin_layout Standard
Dobór okręgu został przedstawiony na rysunku 1.2.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/fast.jpg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wybór otoczenia piksela w metodzie FAST.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Implementacja w OpenCV.
\end_layout

\begin_layout Standard
Poniższy kod prezentuje wykrywanie narożników metodą Fast za pomocą biblioteki
 OpenCV:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout

#include <opencv2/highgui.hpp> 
\end_layout

\begin_layout Plain Layout

#include <opencv2/imgproc.hpp> 
\end_layout

\begin_layout Plain Layout

#include <opencv2/features2d.hpp> 
\end_layout

\begin_layout Plain Layout

#include <vector> 
\end_layout

\begin_layout Plain Layout

#include <iostream>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

using namespace cv; 
\end_layout

\begin_layout Plain Layout

using namespace std;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Mat src, src_gray; 
\end_layout

\begin_layout Plain Layout

int thresh = 20; 
\end_layout

\begin_layout Plain Layout

int max_thresh = 50;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

char* source_window = "Source image"; 
\end_layout

\begin_layout Plain Layout

char* corners_window = "Corners detected";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void Fast_demo(int, void *) {
\end_layout

\begin_layout Plain Layout

    std::vector<KeyPoint> points;     
\end_layout

\begin_layout Plain Layout

	FAST(src_gray, points, thresh);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    auto temp = src_gray.clone();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for(auto keyPoint: points) {         
\end_layout

\begin_layout Plain Layout

		int x = keyPoint.pt.x;         
\end_layout

\begin_layout Plain Layout

		int y = keyPoint.pt.y;         
\end_layout

\begin_layout Plain Layout

		Point p{x, y};         
\end_layout

\begin_layout Plain Layout

		circle(temp, p, 5, Scalar(0));     
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    namedWindow(corners_window, WINDOW_AUTOSIZE);     
\end_layout

\begin_layout Plain Layout

	imshow(corners_window, temp); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(int argc, char** argv) {
\end_layout

\begin_layout Plain Layout

    src = imread(argv[1], 1);     
\end_layout

\begin_layout Plain Layout

	cvtColor(src, src_gray, COLOR_BGR2GRAY);
\end_layout

\begin_layout Plain Layout

	namedWindow(source_window, WINDOW_AUTOSIZE);     
\end_layout

\begin_layout Plain Layout

	createTrackbar("Threshold: ", source_window, &thresh, max_thresh, Fast_demo);
     
\end_layout

\begin_layout Plain Layout

	imshow(source_window, src);
\end_layout

\begin_layout Plain Layout

    Fast_demo(0, 0);
\end_layout

\begin_layout Plain Layout

    waitKey(0);     
\end_layout

\begin_layout Plain Layout

	return(0); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/fast.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wykrywanie punktów charakterystycznych metodą Fast(t=50).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Analiza istniejących rozwiązań
\end_layout

\begin_layout Section
Dopasowywanie punktów w obrazie przestrzennym oparte na wykrywaniu narożników.
\end_layout

\begin_layout Standard
Na podstawie artykułu: 
\begin_inset Quotes pld
\end_inset

A New Stereo Matching Method Based on Sub-pixel Corner Detection
\begin_inset Quotes prd
\end_inset

(Dou Zhao, Ding Liu, Yanxi Yang).
\end_layout

\begin_layout Standard
Znajdowanie i dopasowywanie punktów charakterystycznych odgrywa ważną rolę
 w przetwarzaniu obrazu 3D, wykrywaniu i śledzeniu obiektów.
 W tych zagadnieniach warunkiem koniecznym jest wysoka wydajność systemu
 oraz dokładność detekcji.
 
\end_layout

\begin_layout Standard
W zagadnieniach praktycznych wyróżnia się 3 podejścia: dopasowywanie obszarów(an
g.
 
\begin_inset Quotes pld
\end_inset

Area-based
\begin_inset Quotes prd
\end_inset

), dopasowywanie punktów charakterystycznych oraz dopasowywanie fazowe(ang.
 
\begin_inset Quotes pld
\end_inset

Phase-based
\begin_inset Quotes prd
\end_inset

).
 Pierwsza metoda zapewnia wysoką precyzję, ale posiada znaczące wady w postaci
 trudności wyliczania rozmiaru okna oraz znacznego nakładu obliczeń.
 Kolejna metoda wyróżnia się odpornością na na zakłócenia i wysoką wydajnością.
 Niestety, cechuje się ona również zmniejszoną precyzją.
 Ostatnia metoda jest w stanie usuwać szumy wysokiej częstotliwości oraz
 jest łatwa do implementacji za pomocą obliczeń równoległych.
\end_layout

\begin_layout Standard
W celu poprawy dopasowywania metody punktów charakterystycznych, została
 opracowana podwójna metoda Harisa z dopasowywaniem punktów opartym na poziomie
 jasności.
 Algorytm ten składa się z następujących kroków:
\end_layout

\begin_layout Enumerate
Konwersja obrazu na skalę szarości i filtracja.
\end_layout

\begin_layout Enumerate
Wykrycie narożników standardową metodą Harisa.
\end_layout

\begin_layout Enumerate
Obraz jest dzielony na mniejsze bloki rozmiaru 
\begin_inset Formula $n\times n$
\end_inset

 zawierające wykryte krawędzie.
\end_layout

\begin_layout Enumerate
Dokonywana jest interpolacja jasności każdego z regionów.
\end_layout

\begin_layout Standard
Dopasowywanie punktów odbywa się za pomocą wyliczania charakterystyki 
\begin_inset Formula $R$
\end_inset

 każdego punktu i analizie stosunku wartości charakterystyk.
 Stosunek zbliżony do 1 oznacza dokładne dopasowanie.
\end_layout

\begin_layout Standard
Poniższy obraz prezentuje rezultat algorytmu:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/double-hariss.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Dopasowanie punktów charakterystycznych.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
W zaprezentowanym przykładzie błąd wyniósł około 38%.
\end_layout

\begin_layout Section
Odporny algorytm dopasowywania szablonów za pomocą wykrywania narożników
 dla systemów wizyjnych robotów.
 
\end_layout

\begin_layout Standard
Na podstawie artykułu 
\begin_inset Quotes pld
\end_inset

Robust Template Based Corner Detection Algorithms for Robotic Vision
\begin_inset Quotes prd
\end_inset

.
\end_layout

\begin_layout Standard
Wykrywanie narożników z powodu wydajności i niskiej złożoności obliczeniowej
 znalazło szereg zastosowań w systemach wizyjnych robotów.
 W połączeniu z odpowiednim zaprojektowaniu szablonów poszukiwanych elementów
 można uzyskać bardzo efektywne aplikacje.
 W artykule zarezentowano dwa podejścia do tematu: detekcja na podstawie
 dopasowywania narożników(MBCD - ang.
 
\begin_inset Quotes pld
\end_inset

matching based corner detection
\begin_inset Quotes prd
\end_inset

) oraz dopasowywanie na podstawie korelacji punktów(CBCD - ang.
 
\begin_inset Quotes pld
\end_inset

correlation based corner detection
\begin_inset Quotes prd
\end_inset

).
\end_layout

\begin_layout Standard
Z powodu ograniczonych zasobów sprzętowych w systemach wizyjnych robotów
 kluczowym elementem jest dobór algorytmu i poszukiwanych obiektów.
 Systemy te muszą działać na podobnej zasadzie co układ wzrokowy człowieka:
 być szczególnie czułym na elementy o wysokiej częstotliwości, takie jak
 krawędzie oraz narożniki.
\end_layout

\begin_layout Standard
Istniejące metody wykrywania punktów charakterystycznych można podzielić
 na dwie grupy: oparte na obliczaniu gradientów lub poszukiwaniu podobieństw.
 Pierwsza grupa algorytmów jest czuła na zakłócenia.
 Druga grupa algorytmów opiera się na poszukiwaniu podobieństw pomiędzy
 pikselami.
 
\end_layout

\begin_layout Standard
W wykorzystaniu szablonów zasadnicze znaczenie mają dwie kwestie: jakiego
 typu użyć szablon oraz jak zmierzyć różnice.
 Przykładowe szablony do wykrywania rogów prezentuje poniższy obraz:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/templates.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Szablony do wykrywania narożników.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pomiar różnic pomiędzy szablonami dokonywany jest za pomocą 3 metod: korelacji
 znormalizowanej, normy ko-sinusowej oraz pomiarze odwzorowania.
 
\end_layout

\begin_layout Standard
Wykorzystanie szablonów opiera się na założeniu, że w obrazie istnieją idealne
 narożniki.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/ideal.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Przykłady narożniki.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Metoda MBCD polega na wykorzystaniu trzech poniższych szablonów:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/templates2.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Szablony metody MBCD.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Następnie, każdy z tych szablonów jest obracany o 90 stopni w wyniku czego
 otrzymujemy 12 szablonów.
 Punkt jest uznawany za narożnik jeśli pasuje do co najmniej dwóch z pośród
 wszystkich szablonów.
\end_layout

\begin_layout Standard
Metoda CBCD posługuje się 3 szablonami:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/templates3.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Szablony metody CBCD.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Są one obracane o 90 stopni, wy wyniku czego otrzymuje się się 9 szablonów.
 Piksel jest testowany pod względem podobieństwa z każdy z tych szablonów.
\end_layout

\begin_layout Standard
Poniższy obraz prezentuje porównanie algorytmów wykrywania rogów w systemach
 wizyjnych robotów:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/templates4.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Porównanie algorytmów.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Opis systemu detekcji i śledzenia.
\end_layout

\begin_layout Chapter
Implementacja C++.
 
\end_layout

\begin_layout Chapter
Podział HW/SW.
\end_layout

\begin_layout Chapter
Uruchomienie na Zybo.
\end_layout

\end_body
\end_document
